@page "/quiz/{id:int}"
@using System.Text.Json
@using DataTransferObjects.Questions
@using Gamification.Student.UI.Services.Quiz
@inject IQuizService QuizService
<PageTitle>Quiz</PageTitle>

<h3>Testni Yeching</h3>

@if (Questions == null)
{
    <p>Yuklanmoqda...</p>
}
else if (!isFinished)
{
    if(CurrentQuestion is not null){
        <Question question="@CurrentQuestion" OnOptionSelected="OnOptionSelected" selectedAnswerId="@GetSelectedAnswerId(CurrentQuestion.Id)" />
    }
    else{
        <p>Hozircha test mavjud emas.</p>
    }
}
else
{
    <h4>Natija: @ShowResult()</h4>
    <button class="start-btn" @onclick="RestartQuiz">Testni Qayta Boshlash</button>
}

<div class="nav-arrows">
    <span @onclick="PreviousQuestion"> <img src="./images/left-arrow.svg" /> </span>
    <span @onclick="NextQuestion"> <img src="./images/right-arrow.svg" /> </span>
</div>


@code {
    [Parameter]
    public int id { get; set; }
    private List<QuestionViewModel> Questions;
    private QuestionViewModel? CurrentQuestion;
    private int currentIndex = 0;
    private bool isFinished = false;

    private Dictionary<int, int> SelectedAnswers = new(); // questionId -> answerId

    protected override async Task OnInitializedAsync()
    {
        Questions = await QuizService.GetQuestionsAsync(id);
        
        if (Questions is { Count: > 0 })
            CurrentQuestion = Questions[currentIndex];
    }

    private int GetSelectedAnswerId(int questionId)
    {
        return SelectedAnswers.ContainsKey(questionId) ? SelectedAnswers[questionId] : 0;
    }

    private void OnOptionSelected(int answerId)
    {
        SelectedAnswers[CurrentQuestion.Id] = answerId;
    }

    private void NextQuestion()
    {
        if (currentIndex + 1 < Questions.Count)
        {
            currentIndex++;
            CurrentQuestion = Questions[currentIndex];
        }
        else
        {
            isFinished = true;
        }
    }

    private void PreviousQuestion()
    {
        if (currentIndex > 0)
        {
            currentIndex--;
            CurrentQuestion = Questions[currentIndex];
        }
    }

    private void RestartQuiz()
    {
        currentIndex = 0;
        isFinished = false;
        SelectedAnswers.Clear();
        CurrentQuestion = Questions[currentIndex];
    }

    private string ShowResult()
    {
        string result = string.Empty;

        result = JsonSerializer.Serialize(SelectedAnswers, new JsonSerializerOptions { WriteIndented = true });
        
        return result;
    }
}
