//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Common.Paginations.Models;
using Common.Paginations.Extensions;
using Common.ServiceAttribute;
using Common;
using DataTransferObjects.Courses;
using Gamification.Infrastructure;
using Gamification.Domain.Entities;

namespace Services.Courses
{
    [ScopedService]
    public class CoursesService : ICoursesService
    {
        private readonly GamificationDb _gamificationDb;
        private readonly IMapper _mapper;
        public CoursesService(GamificationDb gamificationDb, IMapper mapper)
        {
            _gamificationDb = gamificationDb;
            _mapper = mapper;
        }

        public async Task<CourseViewModel> AddAsync(CourseCreationDto courseCreationDto)
        {
            var entity = _mapper.Map<Course>(courseCreationDto);
            var entry = await _gamificationDb.Set<Course>().AddAsync(entity);
            await _gamificationDb.SaveChangesAsync();
            return _mapper.Map<CourseViewModel>(entry.Entity);
        }

        public async Task<List<CourseViewModel>> GetAllAsync()
        {
            var entities = await _gamificationDb.Set<Course>().ToListAsync();
            return _mapper.Map<List<CourseViewModel>>(entities);
        }

        public async Task<ListResult<CourseViewModel>> FilterAsync(PaginationOptions filter)
        {
            var paginatedResult = await _gamificationDb.Set<Course>().ApplyPaginationAsync(filter);
            var Courses = _mapper.Map<List<CourseViewModel>>(paginatedResult.paginatedList);
            return new ListResult<CourseViewModel>(paginatedResult.paginationMetadata, Courses);
        }

        public async Task<CourseViewModel> GetByIdAsync(int id)
        {
            var entity = await _gamificationDb.Set<Course>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Course with Id {id} not found.");
            return _mapper.Map<CourseViewModel>(entity);
        }

        public async Task<CourseViewModel> UpdateAsync(int id, CourseModificationDto courseModificationDto)
        {
            var entity = await _gamificationDb.Set<Course>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Course with {id} not found.");
            _mapper.Map(courseModificationDto, entity);
            var entry = _gamificationDb.Set<Course>().Update(entity);
            await _gamificationDb.SaveChangesAsync();
            return _mapper.Map<CourseViewModel>(entry.Entity);
        }

        public async Task<CourseViewModel> DeleteAsync(int id)
        {
            var entity = await _gamificationDb.Set<Course>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Course with {id} not found.");
            var entry = _gamificationDb.Set<Course>().Remove(entity);
            await _gamificationDb.SaveChangesAsync();
            return _mapper.Map<CourseViewModel>(entry.Entity);
        }
    }

    /// <summary>
    /// AutoMapper mapping profile for Course entity.
    /// </summary>
    public class CourseMappingProfile : Profile
    {
        public CourseMappingProfile()
        {
            CreateMap<Course, CourseViewModel>();
            CreateMap<CourseCreationDto, Course>();
            CreateMap<CourseModificationDto, Course>();
        }
    }
}