//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Common.Paginations.Models;
using Common.Paginations.Extensions;
using Common.ServiceAttribute;
using Common;
using Gamification.Infrastructure;
using Gamification.Domain.Entities;

namespace Services.Questions
{
    [ScopedService]
    public class QuestionsService : IQuestionsService
    {
        private readonly GamificationDb _gamificationDb;
        private readonly IMapper _mapper;
        public QuestionsService(GamificationDb gamificationDb, IMapper mapper)
        {
            _gamificationDb = gamificationDb;
            _mapper = mapper;
        }

        public async Task<Question> AddAsync(Question question)
        {
            var entity = _mapper.Map<Question>(question);
            var entry = await _gamificationDb.Set<Question>().AddAsync(entity);
            await _gamificationDb.SaveChangesAsync();
            return entry.Entity;
        }

        public async Task<List<Question>> GetAllAsync()
        {
            var entities = await _gamificationDb.Set<Question>().ToListAsync();
            return entities;
        }

        public async Task<ListResult<Question>> FilterAsync(PaginationOptions filter)
        {
            var paginatedResult = await _gamificationDb.Set<Question>().ApplyPaginationAsync(filter);
            var Questions = _mapper.Map<List<Question>>(paginatedResult.paginatedList);
            return new ListResult<Question>(paginatedResult.paginationMetadata, Questions);
        }

        public async Task<Question> GetByIdAsync(int id)
        {
            var entity = await _gamificationDb.Set<Question>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Question with Id {id} not found.");
            return entity;
        }

        public async Task<Question> UpdateAsync(int id, Question question)
        {
            var entity = await _gamificationDb.Set<Question>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Question with {id} not found.");
            _mapper.Map(question, entity);
            var entry = _gamificationDb.Set<Question>().Update(entity);
            await _gamificationDb.SaveChangesAsync();
            return entry.Entity;
        }

        public async Task<Question> DeleteAsync(int id)
        {
            var entity = await _gamificationDb.Set<Question>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Question with {id} not found.");
            var entry = _gamificationDb.Set<Question>().Remove(entity);
            await _gamificationDb.SaveChangesAsync();
            return entry.Entity;
        }
    }
}