//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using AutoMapper;
using Microsoft.EntityFrameworkCore;
using Microsoft.AspNetCore.Http;
using Common.Paginations.Models;
using Common.Paginations.Extensions;
using Common.ServiceAttribute;
using Common;
using DataTransferObjects.Lessons;
using Gamification.Infrastructure;
using Gamification.Domain.Entities;

namespace Services.Lessons
{
    [ScopedService]
    public class LessonsService : ILessonsService
    {
        private readonly GamificationDb _gamificationDb;
        private readonly IMapper _mapper;
        public LessonsService(GamificationDb gamificationDb, IMapper mapper)
        {
            _gamificationDb = gamificationDb;
            _mapper = mapper;
        }

        public async Task<LessonViewModel> AddAsync(LessonCreationDto lessonCreationDto)
        {
            var entity = _mapper.Map<Lesson>(lessonCreationDto);
            var entry = await _gamificationDb.Set<Lesson>().AddAsync(entity);
            await _gamificationDb.SaveChangesAsync();
            return _mapper.Map<LessonViewModel>(entry.Entity);
        }

        public async Task<List<LessonViewModel>> GetAllAsync()
        {
            var entities = await _gamificationDb.Set<Lesson>().ToListAsync();
            return _mapper.Map<List<LessonViewModel>>(entities);
        }

        public async Task<ListResult<LessonViewModel>> FilterAsync(PaginationOptions filter)
        {
            var paginatedResult = await _gamificationDb.Set<Lesson>().ApplyPaginationAsync(filter);
            var Lessons = _mapper.Map<List<LessonViewModel>>(paginatedResult.paginatedList);
            return new ListResult<LessonViewModel>(paginatedResult.paginationMetadata, Lessons);
        }

        public async Task<LessonViewModel> GetByIdAsync(int id)
        {
            var entity = await _gamificationDb.Set<Lesson>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Lesson with Id {id} not found.");
            return _mapper.Map<LessonViewModel>(entity);
        }

        public async Task<LessonViewModel> UpdateAsync(int id, LessonModificationDto lessonModificationDto)
        {
            var entity = await _gamificationDb.Set<Lesson>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Lesson with {id} not found.");
            _mapper.Map(lessonModificationDto, entity);
            var entry = _gamificationDb.Set<Lesson>().Update(entity);
            await _gamificationDb.SaveChangesAsync();
            return _mapper.Map<LessonViewModel>(entry.Entity);
        }

        public async Task<LessonViewModel> DeleteAsync(int id)
        {
            var entity = await _gamificationDb.Set<Lesson>().FirstOrDefaultAsync(x => x.Id == id);
            if (entity == null)
                throw new InvalidOperationException($"Lesson with {id} not found.");
            var entry = _gamificationDb.Set<Lesson>().Remove(entity);
            await _gamificationDb.SaveChangesAsync();
            return _mapper.Map<LessonViewModel>(entry.Entity);
        }
    }

    /// <summary>
    /// AutoMapper mapping profile for Lesson entity.
    /// </summary>
    public class LessonMappingProfile : Profile
    {
        public LessonMappingProfile()
        {
            CreateMap<Lesson, LessonViewModel>();
            CreateMap<LessonCreationDto, Lesson>();
            CreateMap<LessonModificationDto, Lesson>();
        }
    }
}