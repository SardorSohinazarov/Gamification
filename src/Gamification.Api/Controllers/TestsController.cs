//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Services.Tests;
using Common.Paginations.Models;
using Common;
using DataTransferObjects.Tests;
using Gamification.Application.DataTransferObjects.Tests;
using Microsoft.AspNetCore.Authorization;

namespace Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize(Roles = "Admin")]
    public class TestsController : ControllerBase
    {
        private readonly ITestsService _testsService;
        public TestsController(ITestsService testsService)
        {
            _testsService = testsService;
        }

        [HttpPost]
        public async Task<Result<TestViewModel>> AddAsync(TestCreationDto testCreationDto)
        {
            return Result<TestViewModel>.Success(await _testsService.AddAsync(testCreationDto));
        }

        [HttpPost("file")]
        public async Task<Result<TestViewModel>> AddAsync([FromForm] TestFileCreationDto file, CancellationToken cancellationToken)
        {
            return Result<TestViewModel>.Success(await _testsService.AddAsync(file, cancellationToken));
        }

        [HttpGet]
        public async Task<Result<List<TestViewModel>>> GetAllAsync()
        {
            return Result<List<TestViewModel>>.Success(await _testsService.GetAllAsync());
        }

        [HttpPost("filter")]
        public async Task<Result<ListResult<TestViewModel>>> FilterAsync(PaginationOptions filter)
        {
            return Result<ListResult<TestViewModel>>.Success(await _testsService.FilterAsync(filter));
        }

        [HttpGet("{id}")]
        public async Task<Result<TestViewModel>> GetByIdAsync(int id)
        {
            return Result<TestViewModel>.Success(await _testsService.GetByIdAsync(id));
        }

        [HttpPut("{id}")]
        public async Task<Result<TestViewModel>> UpdateAsync(int id, TestModificationDto testModificationDto)
        {
            return Result<TestViewModel>.Success(await _testsService.UpdateAsync(id, testModificationDto));
        }

        [HttpDelete("{id}")]
        public async Task<Result<TestViewModel>> DeleteAsync(int id)
        {
            return Result<TestViewModel>.Success(await _testsService.DeleteAsync(id));
        }
    }
}