//-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
//-----------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Services.Questions;
using Common.Paginations.Models;
using Common;
using DataTransferObjects.Questions;
using Microsoft.AspNetCore.Authorization;

namespace Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize(Roles = "Admin")]
    public class QuestionsController : ControllerBase
    {
        private readonly IQuestionsService _questionsService;
        public QuestionsController(IQuestionsService questionsService)
        {
            _questionsService = questionsService;
        }

        [HttpPost]
        public async Task<Result<QuestionViewModel>> AddAsync(QuestionCreationDto questionCreationDto)
        {
            return Result<QuestionViewModel>.Success(await _questionsService.AddAsync(questionCreationDto));
        }

        [HttpGet]
        public async Task<Result<List<QuestionViewModel>>> GetAllAsync()
        {
            return Result<List<QuestionViewModel>>.Success(await _questionsService.GetAllAsync());
        }

        [HttpPost("filter")]
        public async Task<Result<ListResult<QuestionViewModel>>> FilterAsync(PaginationOptions filter)
        {
            return Result<ListResult<QuestionViewModel>>.Success(await _questionsService.FilterAsync(filter));
        }

        [HttpGet("{id}")]
        public async Task<Result<QuestionViewModel>> GetByIdAsync(int id)
        {
            return Result<QuestionViewModel>.Success(await _questionsService.GetByIdAsync(id));
        }

        [HttpPut("{id}")]
        public async Task<Result<QuestionViewModel>> UpdateAsync(int id, QuestionModificationDto questionModificationDto)
        {
            return Result<QuestionViewModel>.Success(await _questionsService.UpdateAsync(id, questionModificationDto));
        }

        [HttpDelete("{id}")]
        public async Task<Result<QuestionViewModel>> DeleteAsync(int id)
        {
            return Result<QuestionViewModel>.Success(await _questionsService.DeleteAsync(id));
        }
    }
}