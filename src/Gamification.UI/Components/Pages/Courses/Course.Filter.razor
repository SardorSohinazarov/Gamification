<!-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
------------------------------------------------------------------------>

@page "/courses"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.WebUtilities
@using Common.Paginations.Models
@using System
@using DataTransferObjects.Courses
@using Services.Courses
@inject ICoursesService CourseService

<h3>Course List</h3>

<NavLink class="btn btn-primary mb-3" href="/courses/create">Create New</NavLink>

@if (Courses == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Title</th>
                <th>Description</th>
                <th>Duration</th>
                <th>StartTime</th>
                <th>StartDate</th>
                <th>CreatedBy</th>
                <th>Created</th>
                <th>LastModifiedBy</th>
                <th>LastModified</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Courses)
            {
                <tr>
                    <td>@item.Id</td>
                    @if(@item.Title != default)
                    {
                        <td>@item.Title</td>
                    }
                    else
                    {
                        <td>None</td>
                    }

                    @if(@item.Description != default)
                    {
                        <td>@item.Description</td>
                    }
                    else
                    {
                        <td>None</td>
                    }

                    @if(@item.Duration != default)
                    {
                        <td>@item.Duration</td>
                    }
                    else
                    {
                        <td>None</td>
                    }

                    @if(@item.StartTime != default)
                    {
                        <td>@item.StartTime</td>
                    }
                    else
                    {
                        <td>None</td>
                    }

                    @if(@item.StartDate != default)
                    {
                        <td>@item.StartDate</td>
                    }
                    else
                    {
                        <td>None</td>
                    }

                    @if(@item.CreatedBy != default)
                    {
                        <td>@item.CreatedBy</td>
                    }
                    else
                    {
                        <td>None</td>
                    }

                    @if(@item.Created != default)
                    {
                        <td>@item.Created</td>
                    }
                    else
                    {
                        <td>None</td>
                    }

                    @if(@item.LastModifiedBy != default)
                    {
                        <td>@item.LastModifiedBy</td>
                    }
                    else
                    {
                        <td>None</td>
                    }

                    @if(@item.LastModified != default)
                    {
                        <td>@item.LastModified</td>
                    }
                    else
                    {
                        <td>None</td>
                    }

                    <td>
                        <NavLink class="btn btn-sm btn-info" href="@($"/courses/{item.Id}")">Details</NavLink>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteCourse(item.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <Pagination PaginationMetadata="@PaginationMetadata" PageName="Courses"></Pagination>
}

@code {
    private List<CourseViewModel> Courses { get; set; }
    private PaginationOptions PaginationOptions { get; set; }
    private PaginationMetadata PaginationMetadata { get; set; }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
        ReadQueryAndLoadData();
    }

    private void OnLocationChanged(object sender, LocationChangedEventArgs e)
    {
        ReadQueryAndLoadData();
    }

    private void ReadQueryAndLoadData()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        PaginationOptions = new PaginationOptions(5, 1);

        if (query.TryGetValue("page", out var pageStr) && int.TryParse(pageStr, out var page))
            PaginationOptions.PageToken = page;

        if (query.TryGetValue("size", out var sizeStr) && int.TryParse(sizeStr, out var size))
            PaginationOptions.PageSize = size;

        _ = LoadAsync();
    }

    async Task LoadAsync()
    {
        var filteredData = await CourseService.FilterAsync(PaginationOptions);
        Courses = filteredData.Items;
        PaginationMetadata = filteredData.Pagination;
        await InvokeAsync(StateHasChanged);
    }

    async Task DeleteCourse(int id)
    {
        await CourseService.DeleteAsync(id);
        var filteredData = await CourseService.FilterAsync(PaginationOptions);
        Courses = filteredData.Items;
        PaginationMetadata = filteredData.Pagination;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
