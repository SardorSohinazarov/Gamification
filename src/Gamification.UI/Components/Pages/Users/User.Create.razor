<!-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
------------------------------------------------------------------------>

@page "/users/create"
@rendermode InteractiveServer
@using System
@using Gamification.Domain.Entities
@using DataTransferObjects.Users
@using Services.Users
@inject IUsersService UserService
@inject NavigationManager NavigationManager

<h3>Create New User</h3>

<EditForm FormName="UserCreationDto" Model="@user" OnValidSubmit="() => HandleValidSubmit()">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="firstname">FirstName:</label>
        <InputText id="firstname" class="form-control" @bind-Value="user.FirstName" />
        <ValidationMessage For="@(() => user.FirstName)" />
    </div>
    <div class="form-group mb-3">
        <label for="lastname">LastName:</label>
        <InputText id="lastname" class="form-control" @bind-Value="user.LastName" />
        <ValidationMessage For="@(() => user.LastName)" />
    </div>
    <div class="form-group mb-3">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="user.Username" />
        <ValidationMessage For="@(() => user.Username)" />
    </div>
    <div class="form-group mb-3">
        <label for="phonenumber">PhoneNumber:</label>
        <InputText id="phonenumber" class="form-control" @bind-Value="user.PhoneNumber" />
        <ValidationMessage For="@(() => user.PhoneNumber)" />
    </div>
    <div class="form-group mb-3">
        <label for="telegramid">TelegramId:</label>
        <InputNumber id="telegramid" class="form-control" @bind-Value="user.TelegramId" />
        <ValidationMessage For="@(() => user.TelegramId)" />
    </div>
    <div class="form-group mb-3">
        <label for="passwordhash">PasswordHash:</label>
        <InputText id="passwordhash" class="form-control" @bind-Value="user.PasswordHash" />
        <ValidationMessage For="@(() => user.PasswordHash)" />
    </div>
    <div class="form-group mb-3">
        <label for="salt">Salt:</label>
        <InputText id="salt" class="form-control" @bind-Value="user.Salt" />
        <ValidationMessage For="@(() => user.Salt)" />
    </div>
    <div class="form-group mb-3">
        <label for="usertype">UserType:</label>
        <InputSelect id="usertype" class="form-control" @bind-Value="user.UserType">
            @foreach (var value in Enum.GetValues(typeof(UserType)))
            {
                <option value="@value">@value</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => user.UserType)" />
    </div>
    <div class="form-group mb-3">
        <label for="createdby">CreatedBy:</label>
        <InputText id="createdby" class="form-control" @bind-Value="user.CreatedBy" />
        <ValidationMessage For="@(() => user.CreatedBy)" />
    </div>
    <div class="form-group mb-3">
        <label for="created">Created:</label>
        <InputDate id="created" class="form-control" @bind-Value="user.Created" />
        <ValidationMessage For="@(() => user.Created)" />
    </div>
    <div class="form-group mb-3">
        <label for="lastmodifiedby">LastModifiedBy:</label>
        <InputText id="lastmodifiedby" class="form-control" @bind-Value="user.LastModifiedBy" />
        <ValidationMessage For="@(() => user.LastModifiedBy)" />
    </div>
    <div class="form-group mb-3">
        <label for="lastmodified">LastModified:</label>
        <InputDate id="lastmodified" class="form-control" @bind-Value="user.LastModified" />
        <ValidationMessage For="@(() => user.LastModified)" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public UserCreationDto user { get; set; } = new UserCreationDto();

    private async Task HandleValidSubmit()
    {
        await UserService.AddAsync(user);
        NavigationManager.NavigateTo("/users");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/users");
    }
}
