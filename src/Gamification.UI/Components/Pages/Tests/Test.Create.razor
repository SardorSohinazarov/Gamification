<!-----------------------------------------------------------------------
// This file is autogenerated by EntityCore
// <auto-generated />
------------------------------------------------------------------------>

@page "/tests/create"
@rendermode InteractiveServer
@using System
@using Gamification.Domain.Entities
@using DataTransferObjects.Tests
@using Services.Tests
@inject ITestsService TestService
@inject NavigationManager NavigationManager

<h3>Create New Test</h3>

<EditForm FormName="TestCreationDto" Model="@test" OnValidSubmit="() => HandleValidSubmit()">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="title">Title:</label>
        <InputText id="title" class="form-control" @bind-Value="test.Title" />
        <ValidationMessage For="@(() => test.Title)" />
    </div>
    <div class="form-group mb-3">
        <label for="description">Description:</label>
        <InputText id="description" class="form-control" @bind-Value="test.Description" />
        <ValidationMessage For="@(() => test.Description)" />
    </div>
    <div class="form-group mb-3">
        <label for="duration">Duration:</label>
        <InputNumber id="duration" class="form-control" @bind-Value="test.Duration" />
        <ValidationMessage For="@(() => test.Duration)" />
    </div>
    <div class="form-group mb-3">
        <label for="status">Status:</label>
        <InputSelect id="status" class="form-control" @bind-Value="test.Status">
            @foreach (var value in Enum.GetValues(typeof(TestStatus)))
            {
                <option value="@value">@value</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => test.Status)" />
    </div>
    <div class="form-group mb-3">
        <label for="createdby">CreatedBy:</label>
        <InputText id="createdby" class="form-control" @bind-Value="test.CreatedBy" />
        <ValidationMessage For="@(() => test.CreatedBy)" />
    </div>
    <div class="form-group mb-3">
        <label for="created">Created:</label>
        <InputDate id="created" class="form-control" @bind-Value="test.Created" />
        <ValidationMessage For="@(() => test.Created)" />
    </div>
    <div class="form-group mb-3">
        <label for="lastmodifiedby">LastModifiedBy:</label>
        <InputText id="lastmodifiedby" class="form-control" @bind-Value="test.LastModifiedBy" />
        <ValidationMessage For="@(() => test.LastModifiedBy)" />
    </div>
    <div class="form-group mb-3">
        <label for="lastmodified">LastModified:</label>
        <InputDate id="lastmodified" class="form-control" @bind-Value="test.LastModified" />
        <ValidationMessage For="@(() => test.LastModified)" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
</EditForm>

@code {
    [SupplyParameterFromForm]
    public TestCreationDto test { get; set; } = new TestCreationDto();

    private async Task HandleValidSubmit()
    {
        await TestService.AddAsync(test);
        NavigationManager.NavigateTo("/tests");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/tests");
    }
}
